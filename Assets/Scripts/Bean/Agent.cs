// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from agent.proto</summary>
  public static partial class AgentReflection {

    #region Descriptor
    /// <summary>File descriptor for agent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgthZ2VudC5wcm90bxIITmV0UHJvdG8iFAoGQXV0b0lkEgoKAmlkGAEgASgF",
            "IkEKCFNlZWRJbmZvEhgKEGNsaWVudF9zZW5kX3NlZWQYASABKAUSGwoTY2xp",
            "ZW50X3JlY2VpdmVfc2VlZBgCIAEoBSIjCgdCYXNlQWNrEgsKA3JldBgBIAEo",
            "BRILCgNtc2cYAiABKAkiQQoHQmFzZVJlcRIQCghhcHBfZnJvbRgBIAEoCRIP",
            "CgdhcHBfdmVyGAIgASgFEhMKC2FwcF9jaGFubmVsGAMgASgJIpABCgxVc2Vy",
            "TG9naW5SZXESIwoIYmFzZV9yZXEYASABKAsyES5OZXRQcm90by5CYXNlUmVx",
            "Eg8KB3VzZXJfaWQYAiABKAUSEQoJdW5pcXVlX2lkGAMgASgJEg0KBXRva2Vu",
            "GAQgASgJEhIKCmNvbm5lY3RfdG8YBSABKAkSFAoMaXNfcmVjb25uZWN0GAYg",
            "ASgFIkcKDFVzZXJMb2dpbkFjaxIjCghiYXNlX2FjaxgBIAEoCzIRLk5ldFBy",
            "b3RvLkJhc2VBY2sSEgoKc2VydmljZV9pZBgCIAEoCSIzCgxLaWNrZWRPdXRB",
            "Y2sSIwoIYmFzZV9hY2sYASABKAsyES5OZXRQcm90by5CYXNlQWNrInwKD1Jv",
            "b21TZXRUYWJsZVJlcRIjCghiYXNlX3JlcRgBIAEoCzIRLk5ldFByb3RvLkJh",
            "c2VSZXESEwoLc21hbGxfYmxpbmQYAiABKAUSEQoJYmlnX2JsaW5kGAMgASgF",
            "Eg8KB3RpbWVvdXQYBCABKAUSCwoDbWF4GAUgASgFIloKD1Jvb21TZXRUYWJs",
            "ZUFjaxIjCghiYXNlX2FjaxgBIAEoCzIRLk5ldFByb3RvLkJhc2VBY2sSIgoF",
            "dGFibGUYAiABKAsyEy5OZXRQcm90by5UYWJsZUluZm8iWQoPUm9vbUdldFRh",
            "YmxlUmVxEiMKCGJhc2VfcmVxGAEgASgLMhEuTmV0UHJvdG8uQmFzZVJlcRIP",
            "Cgdyb29tX2lkGAIgASgFEhAKCHRhYmxlX2lkGAMgASgJIloKD1Jvb21HZXRU",
            "YWJsZUFjaxIjCghiYXNlX2FjaxgBIAEoCzIRLk5ldFByb3RvLkJhc2VBY2sS",
            "IgoFdGFibGUYAiABKAsyEy5OZXRQcm90by5UYWJsZUluZm8iSgoQUm9vbUdl",
            "dFBsYXllclJlcRIjCghiYXNlX3JlcRgBIAEoCzIRLk5ldFByb3RvLkJhc2VS",
            "ZXESEQoJcGxheWVyX2lkGAIgASgFIl0KEFJvb21HZXRQbGF5ZXJBY2sSIwoI",
            "YmFzZV9hY2sYASABKAsyES5OZXRQcm90by5CYXNlQWNrEiQKBnBsYXllchgC",
            "IAEoCzIULk5ldFByb3RvLlBsYXllckluZm8iWwoRUm9vbVBsYXllckpvaW5S",
            "ZXESIwoIYmFzZV9yZXEYASABKAsyES5OZXRQcm90by5CYXNlUmVxEg8KB3Jv",
            "b21faWQYAiABKAUSEAoIdGFibGVfaWQYAyABKAkiXgoRUm9vbVBsYXllckpv",
            "aW5BY2sSIwoIYmFzZV9hY2sYASABKAsyES5OZXRQcm90by5CYXNlQWNrEiQK",
            "BnBsYXllchgCIAEoCzIULk5ldFByb3RvLlBsYXllckluZm8iSgoRUm9vbVBs",
            "YXllckdvbmVSZXESIwoIYmFzZV9yZXEYASABKAsyES5OZXRQcm90by5CYXNl",
            "UmVxEhAKCHRhYmxlX2lkGAIgASgJIl4KEVJvb21QbGF5ZXJHb25lQWNrEiMK",
            "CGJhc2VfYWNrGAEgASgLMhEuTmV0UHJvdG8uQmFzZUFjaxIkCgZwbGF5ZXIY",
            "AiABKAsyFC5OZXRQcm90by5QbGF5ZXJJbmZvIlYKEFJvb21QbGF5ZXJCZXRS",
            "ZXESIwoIYmFzZV9yZXEYASABKAsyES5OZXRQcm90by5CYXNlUmVxEhAKCHRh",
            "YmxlX2lkGAIgASgJEgsKA2JldBgDIAEoBSKCAQoQUm9vbVBsYXllckJldEFj",
            "axIjCghiYXNlX2FjaxgBIAEoCzIRLk5ldFByb3RvLkJhc2VBY2sSEAoIdGFi",
            "bGVfaWQYAiABKAkSDgoGYWN0aW9uGAMgASgJEgsKA2JldBgEIAEoBRINCgVj",
            "aGlwcxgFIAEoBRILCgNwb3MYBiABKAUiWgoNUm9vbUJ1dHRvbkFjaxIjCghi",
            "YXNlX2FjaxgBIAEoCzIRLk5ldFByb3RvLkJhc2VBY2sSEAoIdGFibGVfaWQY",
            "AiABKAkSEgoKYnV0dG9uX3BvcxgDIAEoBSKTAQoLUm9vbURlYWxBY2sSIwoI",
            "YmFzZV9hY2sYASABKAsyES5OZXRQcm90by5CYXNlQWNrEg4KBmFjdGlvbhgC",
            "IAEoCRIhCgVjYXJkcxgDIAMoCzISLk5ldFByb3RvLkNhcmRJbmZvEhIKCmhh",
            "bmRfbGV2ZWwYBCABKAUSGAoQaGFuZF9maW5hbF92YWx1ZRgFIAEoBSI+CgpS",
            "b29tUG90QWNrEiMKCGJhc2VfYWNrGAEgASgLMhEuTmV0UHJvdG8uQmFzZUFj",
            "axILCgNwb3QYAiADKAUiUwoNUm9vbUFjdGlvbkFjaxIjCghiYXNlX2FjaxgB",
            "IAEoCzIRLk5ldFByb3RvLkJhc2VBY2sSCwoDcG9zGAIgASgFEhAKCGJhc2Vf",
            "YmV0GAMgASgFIn8KD1Jvb21TaG93ZG93bkFjaxIjCghiYXNlX2FjaxgBIAEo",
            "CzIRLk5ldFByb3RvLkJhc2VBY2sSIgoFdGFibGUYAiABKAsyEy5OZXRQcm90",
            "by5UYWJsZUluZm8SIwoIcG90X2xpc3QYAyADKAsyES5OZXRQcm90by5Qb3RJ",
            "bmZvIk0KFFJvb21QbGF5ZXJTdGFuZHVwUmVxEiMKCGJhc2VfcmVxGAEgASgL",
            "MhEuTmV0UHJvdG8uQmFzZVJlcRIQCgh0YWJsZV9pZBgCIAEoCSKDAQoUUm9v",
            "bVBsYXllclN0YW5kdXBBY2sSIwoIYmFzZV9hY2sYASABKAsyES5OZXRQcm90",
            "by5CYXNlQWNrEhAKCHRhYmxlX2lkGAIgASgJEhEKCXBsYXllcl9pZBgDIAEo",
            "BRISCgpwbGF5ZXJfcG9zGAQgASgFEg0KBWZvcmNlGAUgASgIIk0KFFJvb21Q",
            "bGF5ZXJTaXRkb3duUmVxEiMKCGJhc2VfcmVxGAEgASgLMhEuTmV0UHJvdG8u",
            "QmFzZVJlcRIQCgh0YWJsZV9pZBgCIAEoCSJhChRSb29tUGxheWVyU2l0ZG93",
            "bkFjaxIjCghiYXNlX2FjaxgBIAEoCzIRLk5ldFByb3RvLkJhc2VBY2sSJAoG",
            "cGxheWVyGAIgASgLMhQuTmV0UHJvdG8uUGxheWVySW5mbyI/ChhSb29tUGxh",
            "eWVyQ2hhbmdlVGFibGVSZXESIwoIYmFzZV9yZXEYASABKAsyES5OZXRQcm90",
            "by5CYXNlUmVxIjsKFFJvb21TaHV0ZG93blRhYmxlQWNrEiMKCGJhc2VfYWNr",
            "GAEgASgLMhEuTmV0UHJvdG8uQmFzZUFjayJIChNSb29tUGxheWVyTG9nb3V0",
            "UmVxEiMKCGJhc2VfcmVxGAEgASgLMhEuTmV0UHJvdG8uQmFzZVJlcRIMCgR0",
            "eXBlGAIgASgFImEKFlJvb21QbGF5ZXJSZWNvbm5lY3RBY2sSIwoIYmFzZV9h",
            "Y2sYASABKAsyES5OZXRQcm90by5CYXNlQWNrEiIKBXRhYmxlGAIgASgLMhMu",
            "TmV0UHJvdG8uVGFibGVJbmZvIjwKEFJvb21UYWJsZUNoYXRBY2sSCgoCaWQY",
            "ASABKAkSDAoEYm9keRgCIAEoDBIOCgZvZmZzZXQYAyABKAMiUQoQUm9vbVRh",
            "YmxlQ2hhdFJlcRIjCghiYXNlX3JlcRgBIAEoCzIRLk5ldFByb3RvLkJhc2VS",
            "ZXESCgoCaWQYAiABKAkSDAoEYm9keRgDIAEoDCI2ChhSb29tUGxheWVyQXV0",
            "b1NpdGRvd25BY2sSCwoDbnVtGAEgASgFEg0KBXF1ZXVlGAIgAygFIj8KGFJv",
            "b21QbGF5ZXJBdXRvU2l0ZG93blJlcRIjCghiYXNlX3JlcRgBIAEoCzIRLk5l",
            "dFByb3RvLkJhc2VSZXEiIgoHUG90SW5mbxILCgNwb3QYASABKAUSCgoCcHMY",
            "AiADKAUi+wEKCVRhYmxlSW5mbxIKCgJpZBgBIAEoCRITCgtzbWFsbF9ibGlu",
            "ZBgCIAEoBRIRCgliaWdfYmxpbmQYAyABKAUSCwoDYmV0GAQgASgFEg8KB3Rp",
            "bWVvdXQYBSABKAUSIQoFY2FyZHMYBiADKAsyEi5OZXRQcm90by5DYXJkSW5m",
            "bxILCgNwb3QYByADKAUSDQoFY2hpcHMYCCADKAUSDgoGYnV0dG9uGAkgASgF",
            "EgkKAW4YCiABKAUSCwoDbWF4GAsgASgFEiUKB3BsYXllcnMYDCADKAsyFC5O",
            "ZXRQcm90by5QbGF5ZXJJbmZvEg4KBnN0YXR1cxgNIAEoBSIlCghDYXJkSW5m",
            "bxIMCgRzdWl0GAEgASgFEgsKA3ZhbBgCIAEoBSK5AQoKUGxheWVySW5mbxIL",
            "CgNwb3MYASABKAUSCgoCaWQYAiABKAUSEAoIbmlja25hbWUYAyABKAkSDgoG",
            "YXZhdGFyGAQgASgJEg0KBWxldmVsGAUgASgJEg0KBWNoaXBzGAYgASgFEgsK",
            "A2JldBgHIAEoBRIOCgZhY3Rpb24YCCABKAkSIQoFY2FyZHMYCSADKAsyEi5O",
            "ZXRQcm90by5DYXJkSW5mbxISCgpoYW5kX2xldmVsGAogASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.AutoId), global::NetProto.AutoId.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SeedInfo), global::NetProto.SeedInfo.Parser, new[]{ "ClientSendSeed", "ClientReceiveSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BaseAck), global::NetProto.BaseAck.Parser, new[]{ "Ret", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BaseReq), global::NetProto.BaseReq.Parser, new[]{ "AppFrom", "AppVer", "AppChannel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.UserLoginReq), global::NetProto.UserLoginReq.Parser, new[]{ "BaseReq", "UserId", "UniqueId", "Token", "ConnectTo", "IsReconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.UserLoginAck), global::NetProto.UserLoginAck.Parser, new[]{ "BaseAck", "ServiceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.KickedOutAck), global::NetProto.KickedOutAck.Parser, new[]{ "BaseAck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomSetTableReq), global::NetProto.RoomSetTableReq.Parser, new[]{ "BaseReq", "SmallBlind", "BigBlind", "Timeout", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomSetTableAck), global::NetProto.RoomSetTableAck.Parser, new[]{ "BaseAck", "Table" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomGetTableReq), global::NetProto.RoomGetTableReq.Parser, new[]{ "BaseReq", "RoomId", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomGetTableAck), global::NetProto.RoomGetTableAck.Parser, new[]{ "BaseAck", "Table" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomGetPlayerReq), global::NetProto.RoomGetPlayerReq.Parser, new[]{ "BaseReq", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomGetPlayerAck), global::NetProto.RoomGetPlayerAck.Parser, new[]{ "BaseAck", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerJoinReq), global::NetProto.RoomPlayerJoinReq.Parser, new[]{ "BaseReq", "RoomId", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerJoinAck), global::NetProto.RoomPlayerJoinAck.Parser, new[]{ "BaseAck", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerGoneReq), global::NetProto.RoomPlayerGoneReq.Parser, new[]{ "BaseReq", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerGoneAck), global::NetProto.RoomPlayerGoneAck.Parser, new[]{ "BaseAck", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerBetReq), global::NetProto.RoomPlayerBetReq.Parser, new[]{ "BaseReq", "TableId", "Bet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerBetAck), global::NetProto.RoomPlayerBetAck.Parser, new[]{ "BaseAck", "TableId", "Action", "Bet", "Chips", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomButtonAck), global::NetProto.RoomButtonAck.Parser, new[]{ "BaseAck", "TableId", "ButtonPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomDealAck), global::NetProto.RoomDealAck.Parser, new[]{ "BaseAck", "Action", "Cards", "HandLevel", "HandFinalValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPotAck), global::NetProto.RoomPotAck.Parser, new[]{ "BaseAck", "Pot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomActionAck), global::NetProto.RoomActionAck.Parser, new[]{ "BaseAck", "Pos", "BaseBet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomShowdownAck), global::NetProto.RoomShowdownAck.Parser, new[]{ "BaseAck", "Table", "PotList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerStandupReq), global::NetProto.RoomPlayerStandupReq.Parser, new[]{ "BaseReq", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerStandupAck), global::NetProto.RoomPlayerStandupAck.Parser, new[]{ "BaseAck", "TableId", "PlayerId", "PlayerPos", "Force" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerSitdownReq), global::NetProto.RoomPlayerSitdownReq.Parser, new[]{ "BaseReq", "TableId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerSitdownAck), global::NetProto.RoomPlayerSitdownAck.Parser, new[]{ "BaseAck", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerChangeTableReq), global::NetProto.RoomPlayerChangeTableReq.Parser, new[]{ "BaseReq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomShutdownTableAck), global::NetProto.RoomShutdownTableAck.Parser, new[]{ "BaseAck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerLogoutReq), global::NetProto.RoomPlayerLogoutReq.Parser, new[]{ "BaseReq", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerReconnectAck), global::NetProto.RoomPlayerReconnectAck.Parser, new[]{ "BaseAck", "Table" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomTableChatAck), global::NetProto.RoomTableChatAck.Parser, new[]{ "Id", "Body", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomTableChatReq), global::NetProto.RoomTableChatReq.Parser, new[]{ "BaseReq", "Id", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerAutoSitdownAck), global::NetProto.RoomPlayerAutoSitdownAck.Parser, new[]{ "Num", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.RoomPlayerAutoSitdownReq), global::NetProto.RoomPlayerAutoSitdownReq.Parser, new[]{ "BaseReq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PotInfo), global::NetProto.PotInfo.Parser, new[]{ "Pot", "Ps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.TableInfo), global::NetProto.TableInfo.Parser, new[]{ "Id", "SmallBlind", "BigBlind", "Bet", "Timeout", "Cards", "Pot", "Chips", "Button", "N", "Max", "Players", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.CardInfo), global::NetProto.CardInfo.Parser, new[]{ "Suit", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PlayerInfo), global::NetProto.PlayerInfo.Parser, new[]{ "Pos", "Id", "Nickname", "Avatar", "Level", "Chips", "Bet", "Action", "Cards", "HandLevel" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 0,1 心跳包
  /// </summary>
  public sealed partial class AutoId : pb::IMessage<AutoId> {
    private static readonly pb::MessageParser<AutoId> _parser = new pb::MessageParser<AutoId>(() => new AutoId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoId(AutoId other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoId Clone() {
      return new AutoId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 30,31 通信加密种子
  /// </summary>
  public sealed partial class SeedInfo : pb::IMessage<SeedInfo> {
    private static readonly pb::MessageParser<SeedInfo> _parser = new pb::MessageParser<SeedInfo>(() => new SeedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeedInfo(SeedInfo other) : this() {
      clientSendSeed_ = other.clientSendSeed_;
      clientReceiveSeed_ = other.clientReceiveSeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeedInfo Clone() {
      return new SeedInfo(this);
    }

    /// <summary>Field number for the "client_send_seed" field.</summary>
    public const int ClientSendSeedFieldNumber = 1;
    private int clientSendSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientSendSeed {
      get { return clientSendSeed_; }
      set {
        clientSendSeed_ = value;
      }
    }

    /// <summary>Field number for the "client_receive_seed" field.</summary>
    public const int ClientReceiveSeedFieldNumber = 2;
    private int clientReceiveSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientReceiveSeed {
      get { return clientReceiveSeed_; }
      set {
        clientReceiveSeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientSendSeed != other.ClientSendSeed) return false;
      if (ClientReceiveSeed != other.ClientReceiveSeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientSendSeed != 0) hash ^= ClientSendSeed.GetHashCode();
      if (ClientReceiveSeed != 0) hash ^= ClientReceiveSeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientSendSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientSendSeed);
      }
      if (ClientReceiveSeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClientReceiveSeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientSendSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientSendSeed);
      }
      if (ClientReceiveSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientReceiveSeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeedInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClientSendSeed != 0) {
        ClientSendSeed = other.ClientSendSeed;
      }
      if (other.ClientReceiveSeed != 0) {
        ClientReceiveSeed = other.ClientReceiveSeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientSendSeed = input.ReadInt32();
            break;
          }
          case 16: {
            ClientReceiveSeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一般性回复payload
  /// </summary>
  public sealed partial class BaseAck : pb::IMessage<BaseAck> {
    private static readonly pb::MessageParser<BaseAck> _parser = new pb::MessageParser<BaseAck>(() => new BaseAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseAck(BaseAck other) : this() {
      ret_ = other.ret_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseAck Clone() {
      return new BaseAck(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// 1代表成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseAck other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一般性请求payload
  /// </summary>
  public sealed partial class BaseReq : pb::IMessage<BaseReq> {
    private static readonly pb::MessageParser<BaseReq> _parser = new pb::MessageParser<BaseReq>(() => new BaseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseReq(BaseReq other) : this() {
      appFrom_ = other.appFrom_;
      appVer_ = other.appVer_;
      appChannel_ = other.appChannel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseReq Clone() {
      return new BaseReq(this);
    }

    /// <summary>Field number for the "app_from" field.</summary>
    public const int AppFromFieldNumber = 1;
    private string appFrom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppFrom {
      get { return appFrom_; }
      set {
        appFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_ver" field.</summary>
    public const int AppVerFieldNumber = 2;
    private int appVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppVer {
      get { return appVer_; }
      set {
        appVer_ = value;
      }
    }

    /// <summary>Field number for the "app_channel" field.</summary>
    public const int AppChannelFieldNumber = 3;
    private string appChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppChannel {
      get { return appChannel_; }
      set {
        appChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppFrom != other.AppFrom) return false;
      if (AppVer != other.AppVer) return false;
      if (AppChannel != other.AppChannel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppFrom.Length != 0) hash ^= AppFrom.GetHashCode();
      if (AppVer != 0) hash ^= AppVer.GetHashCode();
      if (AppChannel.Length != 0) hash ^= AppChannel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppFrom.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppFrom);
      }
      if (AppVer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AppVer);
      }
      if (AppChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppChannel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppFrom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppFrom);
      }
      if (AppVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppVer);
      }
      if (AppChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppChannel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseReq other) {
      if (other == null) {
        return;
      }
      if (other.AppFrom.Length != 0) {
        AppFrom = other.AppFrom;
      }
      if (other.AppVer != 0) {
        AppVer = other.AppVer;
      }
      if (other.AppChannel.Length != 0) {
        AppChannel = other.AppChannel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AppFrom = input.ReadString();
            break;
          }
          case 16: {
            AppVer = input.ReadInt32();
            break;
          }
          case 26: {
            AppChannel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 10, 用户登录
  /// </summary>
  public sealed partial class UserLoginReq : pb::IMessage<UserLoginReq> {
    private static readonly pb::MessageParser<UserLoginReq> _parser = new pb::MessageParser<UserLoginReq>(() => new UserLoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginReq(UserLoginReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      userId_ = other.userId_;
      uniqueId_ = other.uniqueId_;
      token_ = other.token_;
      connectTo_ = other.connectTo_;
      isReconnect_ = other.isReconnect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginReq Clone() {
      return new UserLoginReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 3;
    private string uniqueId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_to" field.</summary>
    public const int ConnectToFieldNumber = 5;
    private string connectTo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectTo {
      get { return connectTo_; }
      set {
        connectTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_reconnect" field.</summary>
    public const int IsReconnectFieldNumber = 6;
    private int isReconnect_;
    /// <summary>
    /// 1重连  0正常登录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsReconnect {
      get { return isReconnect_; }
      set {
        isReconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (UserId != other.UserId) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Token != other.Token) return false;
      if (ConnectTo != other.ConnectTo) return false;
      if (IsReconnect != other.IsReconnect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ConnectTo.Length != 0) hash ^= ConnectTo.GetHashCode();
      if (IsReconnect != 0) hash ^= IsReconnect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (UniqueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UniqueId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (ConnectTo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ConnectTo);
      }
      if (IsReconnect != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IsReconnect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ConnectTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectTo);
      }
      if (IsReconnect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReconnect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ConnectTo.Length != 0) {
        ConnectTo = other.ConnectTo;
      }
      if (other.IsReconnect != 0) {
        IsReconnect = other.IsReconnect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            UniqueId = input.ReadString();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 42: {
            ConnectTo = input.ReadString();
            break;
          }
          case 48: {
            IsReconnect = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 11, 用户登录回复
  /// </summary>
  public sealed partial class UserLoginAck : pb::IMessage<UserLoginAck> {
    private static readonly pb::MessageParser<UserLoginAck> _parser = new pb::MessageParser<UserLoginAck>(() => new UserLoginAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginAck(UserLoginAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      serviceId_ = other.serviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginAck Clone() {
      return new UserLoginAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 2;
    private string serviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (ServiceId != other.ServiceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (ServiceId.Length != 0) hash ^= ServiceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (ServiceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (ServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.ServiceId.Length != 0) {
        ServiceId = other.ServiceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            ServiceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 40, 用户踢出通知
  /// </summary>
  public sealed partial class KickedOutAck : pb::IMessage<KickedOutAck> {
    private static readonly pb::MessageParser<KickedOutAck> _parser = new pb::MessageParser<KickedOutAck>(() => new KickedOutAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickedOutAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickedOutAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickedOutAck(KickedOutAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickedOutAck Clone() {
      return new KickedOutAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickedOutAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickedOutAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickedOutAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2003, 创建牌桌
  /// </summary>
  public sealed partial class RoomSetTableReq : pb::IMessage<RoomSetTableReq> {
    private static readonly pb::MessageParser<RoomSetTableReq> _parser = new pb::MessageParser<RoomSetTableReq>(() => new RoomSetTableReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSetTableReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableReq(RoomSetTableReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      smallBlind_ = other.smallBlind_;
      bigBlind_ = other.bigBlind_;
      timeout_ = other.timeout_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableReq Clone() {
      return new RoomSetTableReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "small_blind" field.</summary>
    public const int SmallBlindFieldNumber = 2;
    private int smallBlind_;
    /// <summary>
    /// 小盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 3;
    private int bigBlind_;
    /// <summary>
    /// 大盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 4;
    private int timeout_;
    /// <summary>
    /// 倒计时超时时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 5;
    private int max_;
    /// <summary>
    ///  牌桌最大玩家人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSetTableReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSetTableReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (BigBlind != other.BigBlind) return false;
      if (Timeout != other.Timeout) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (SmallBlind != 0) hash ^= SmallBlind.GetHashCode();
      if (BigBlind != 0) hash ^= BigBlind.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (SmallBlind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SmallBlind);
      }
      if (BigBlind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BigBlind);
      }
      if (Timeout != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Timeout);
      }
      if (Max != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (SmallBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallBlind);
      }
      if (BigBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigBlind);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSetTableReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.SmallBlind != 0) {
        SmallBlind = other.SmallBlind;
      }
      if (other.BigBlind != 0) {
        BigBlind = other.BigBlind;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            SmallBlind = input.ReadInt32();
            break;
          }
          case 24: {
            BigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            Timeout = input.ReadInt32();
            break;
          }
          case 40: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2004, 创建牌桌回复
  /// </summary>
  public sealed partial class RoomSetTableAck : pb::IMessage<RoomSetTableAck> {
    private static readonly pb::MessageParser<RoomSetTableAck> _parser = new pb::MessageParser<RoomSetTableAck>(() => new RoomSetTableAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSetTableAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableAck(RoomSetTableAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Table = other.table_ != null ? other.Table.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetTableAck Clone() {
      return new RoomSetTableAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 2;
    private global::NetProto.TableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSetTableAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSetTableAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (table_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSetTableAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::NetProto.TableInfo();
        }
        Table.MergeFrom(other.Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (table_ == null) {
              table_ = new global::NetProto.TableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2005, 查询牌桌信息
  /// </summary>
  public sealed partial class RoomGetTableReq : pb::IMessage<RoomGetTableReq> {
    private static readonly pb::MessageParser<RoomGetTableReq> _parser = new pb::MessageParser<RoomGetTableReq>(() => new RoomGetTableReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomGetTableReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableReq(RoomGetTableReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      roomId_ = other.roomId_;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableReq Clone() {
      return new RoomGetTableReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private int roomId_;
    /// <summary>
    /// 房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 3;
    private string tableId_ = "";
    /// <summary>
    /// 牌桌id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomGetTableReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomGetTableReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (RoomId != other.RoomId) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomGetTableReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 26: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2006, 查询牌桌信息回复 (当玩家加入牌桌后，服务器会向此用户推送牌桌信息)
  /// </summary>
  public sealed partial class RoomGetTableAck : pb::IMessage<RoomGetTableAck> {
    private static readonly pb::MessageParser<RoomGetTableAck> _parser = new pb::MessageParser<RoomGetTableAck>(() => new RoomGetTableAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomGetTableAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableAck(RoomGetTableAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Table = other.table_ != null ? other.Table.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetTableAck Clone() {
      return new RoomGetTableAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 2;
    private global::NetProto.TableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomGetTableAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomGetTableAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (table_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomGetTableAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::NetProto.TableInfo();
        }
        Table.MergeFrom(other.Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (table_ == null) {
              table_ = new global::NetProto.TableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2007, 查询玩家信息
  /// </summary>
  public sealed partial class RoomGetPlayerReq : pb::IMessage<RoomGetPlayerReq> {
    private static readonly pb::MessageParser<RoomGetPlayerReq> _parser = new pb::MessageParser<RoomGetPlayerReq>(() => new RoomGetPlayerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomGetPlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerReq(RoomGetPlayerReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerReq Clone() {
      return new RoomGetPlayerReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomGetPlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomGetPlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomGetPlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2008, 查询玩家信息回复
  /// </summary>
  public sealed partial class RoomGetPlayerAck : pb::IMessage<RoomGetPlayerAck> {
    private static readonly pb::MessageParser<RoomGetPlayerAck> _parser = new pb::MessageParser<RoomGetPlayerAck>(() => new RoomGetPlayerAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomGetPlayerAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerAck(RoomGetPlayerAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomGetPlayerAck Clone() {
      return new RoomGetPlayerAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::NetProto.PlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomGetPlayerAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomGetPlayerAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomGetPlayerAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.PlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::NetProto.PlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2101, 玩家加入游戏
  /// </summary>
  public sealed partial class RoomPlayerJoinReq : pb::IMessage<RoomPlayerJoinReq> {
    private static readonly pb::MessageParser<RoomPlayerJoinReq> _parser = new pb::MessageParser<RoomPlayerJoinReq>(() => new RoomPlayerJoinReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerJoinReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinReq(RoomPlayerJoinReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      roomId_ = other.roomId_;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinReq Clone() {
      return new RoomPlayerJoinReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 3;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerJoinReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerJoinReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (RoomId != other.RoomId) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerJoinReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 26: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2102, 通报加入游戏的玩家
  /// </summary>
  public sealed partial class RoomPlayerJoinAck : pb::IMessage<RoomPlayerJoinAck> {
    private static readonly pb::MessageParser<RoomPlayerJoinAck> _parser = new pb::MessageParser<RoomPlayerJoinAck>(() => new RoomPlayerJoinAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerJoinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinAck(RoomPlayerJoinAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerJoinAck Clone() {
      return new RoomPlayerJoinAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::NetProto.PlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerJoinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerJoinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerJoinAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.PlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::NetProto.PlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2103, 玩家离开牌桌
  /// </summary>
  public sealed partial class RoomPlayerGoneReq : pb::IMessage<RoomPlayerGoneReq> {
    private static readonly pb::MessageParser<RoomPlayerGoneReq> _parser = new pb::MessageParser<RoomPlayerGoneReq>(() => new RoomPlayerGoneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerGoneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneReq(RoomPlayerGoneReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneReq Clone() {
      return new RoomPlayerGoneReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerGoneReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerGoneReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerGoneReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2104, 服务器广播离开牌桌的玩家
  /// </summary>
  public sealed partial class RoomPlayerGoneAck : pb::IMessage<RoomPlayerGoneAck> {
    private static readonly pb::MessageParser<RoomPlayerGoneAck> _parser = new pb::MessageParser<RoomPlayerGoneAck>(() => new RoomPlayerGoneAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerGoneAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneAck(RoomPlayerGoneAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerGoneAck Clone() {
      return new RoomPlayerGoneAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::NetProto.PlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerGoneAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerGoneAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerGoneAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.PlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::NetProto.PlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2105, 玩家下注
  /// 玩家有四种下注方式，下注数分别对应为：
  /// 弃牌：&lt; 0 或空 表示弃牌 (fold)
  /// 看注：= 0 表示看注 (check)
  /// 跟注：小于等于单注额 (call)
  /// 加注：大于单注额 (raise)
  /// 全押：等于玩家手中所有筹码 (allin)
  /// </summary>
  public sealed partial class RoomPlayerBetReq : pb::IMessage<RoomPlayerBetReq> {
    private static readonly pb::MessageParser<RoomPlayerBetReq> _parser = new pb::MessageParser<RoomPlayerBetReq>(() => new RoomPlayerBetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerBetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetReq(RoomPlayerBetReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      tableId_ = other.tableId_;
      bet_ = other.bet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetReq Clone() {
      return new RoomPlayerBetReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private int bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerBetReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerBetReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (TableId != other.TableId) return false;
      if (Bet != other.Bet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerBetReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2106, 玩家下注回复
  /// </summary>
  public sealed partial class RoomPlayerBetAck : pb::IMessage<RoomPlayerBetAck> {
    private static readonly pb::MessageParser<RoomPlayerBetAck> _parser = new pb::MessageParser<RoomPlayerBetAck>(() => new RoomPlayerBetAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerBetAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetAck(RoomPlayerBetAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      tableId_ = other.tableId_;
      action_ = other.action_;
      bet_ = other.bet_;
      chips_ = other.chips_;
      pos_ = other.pos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerBetAck Clone() {
      return new RoomPlayerBetAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private string action_ = "";
    /// <summary>
    /// 下注方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 4;
    private int bet_;
    /// <summary>
    /// 下注数(总数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 5;
    private int chips_;
    /// <summary>
    /// 剩余筹码数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private int pos_;
    /// <summary>
    /// 下注玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerBetAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerBetAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (TableId != other.TableId) return false;
      if (Action != other.Action) return false;
      if (Bet != other.Bet) return false;
      if (Chips != other.Chips) return false;
      if (Pos != other.Pos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Chips != 0) hash ^= Chips.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (Bet != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bet);
      }
      if (Chips != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Chips);
      }
      if (Pos != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chips);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerBetAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 32: {
            Bet = input.ReadInt32();
            break;
          }
          case 40: {
            Chips = input.ReadInt32();
            break;
          }
          case 48: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2107, 通报本局庄家 (服务器广播此消息，代表游戏开始并确定本局庄家)
  /// </summary>
  public sealed partial class RoomButtonAck : pb::IMessage<RoomButtonAck> {
    private static readonly pb::MessageParser<RoomButtonAck> _parser = new pb::MessageParser<RoomButtonAck>(() => new RoomButtonAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomButtonAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomButtonAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomButtonAck(RoomButtonAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      tableId_ = other.tableId_;
      buttonPos_ = other.buttonPos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomButtonAck Clone() {
      return new RoomButtonAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "button_pos" field.</summary>
    public const int ButtonPosFieldNumber = 3;
    private int buttonPos_;
    /// <summary>
    /// 庄家座位号，从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ButtonPos {
      get { return buttonPos_; }
      set {
        buttonPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomButtonAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomButtonAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (TableId != other.TableId) return false;
      if (ButtonPos != other.ButtonPos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (ButtonPos != 0) hash ^= ButtonPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (ButtonPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ButtonPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (ButtonPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ButtonPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomButtonAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.ButtonPos != 0) {
        ButtonPos = other.ButtonPos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 24: {
            ButtonPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2108, 发牌 - 共有四轮发牌，按顺序分别为：preflop (底牌), flop (翻牌), turn (转牌), river(河牌)
  /// </summary>
  public sealed partial class RoomDealAck : pb::IMessage<RoomDealAck> {
    private static readonly pb::MessageParser<RoomDealAck> _parser = new pb::MessageParser<RoomDealAck>(() => new RoomDealAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomDealAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDealAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDealAck(RoomDealAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      action_ = other.action_;
      cards_ = other.cards_.Clone();
      handLevel_ = other.handLevel_;
      handFinalValue_ = other.handFinalValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDealAck Clone() {
      return new RoomDealAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private string action_ = "";
    /// <summary>
    /// preflop (底牌), flop (翻牌), turn (转牌), river(河牌)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.CardInfo> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.CardInfo> cards_ = new pbc::RepeatedField<global::NetProto.CardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.CardInfo> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "hand_level" field.</summary>
    public const int HandLevelFieldNumber = 4;
    private int handLevel_;
    /// <summary>
    ///
    ///这套手牌的权重等级，一共有10个等级
    ///皇家同花顺：10
    ///同花顺    ：9
    ///四条      ：8
    ///葫芦      ：7
    ///同花      ：6
    ///顺子      ：5
    ///三条      ：4
    ///两对      ：3
    ///一对      ：2
    ///高牌      ：1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandLevel {
      get { return handLevel_; }
      set {
        handLevel_ = value;
      }
    }

    /// <summary>Field number for the "hand_final_value" field.</summary>
    public const int HandFinalValueFieldNumber = 5;
    private int handFinalValue_;
    /// <summary>
    ///
    ///一副手牌的最终值，Level相同的情况下，我们用FinalValue来比较大小
    ///例如一副手牌：3 3 3 7 7 A K，
    ///它的值是：33377AK
    ///数据排序规则是，出现次数多者优先，次数相同则大小优先
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandFinalValue {
      get { return handFinalValue_; }
      set {
        handFinalValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomDealAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomDealAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (Action != other.Action) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (HandLevel != other.HandLevel) return false;
      if (HandFinalValue != other.HandFinalValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (HandLevel != 0) hash ^= HandLevel.GetHashCode();
      if (HandFinalValue != 0) hash ^= HandFinalValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (HandLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HandLevel);
      }
      if (HandFinalValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HandFinalValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (HandLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandLevel);
      }
      if (HandFinalValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandFinalValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomDealAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      cards_.Add(other.cards_);
      if (other.HandLevel != 0) {
        HandLevel = other.HandLevel;
      }
      if (other.HandFinalValue != 0) {
        HandFinalValue = other.HandFinalValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            HandLevel = input.ReadInt32();
            break;
          }
          case 40: {
            HandFinalValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2109, 通报奖池
  /// </summary>
  public sealed partial class RoomPotAck : pb::IMessage<RoomPotAck> {
    private static readonly pb::MessageParser<RoomPotAck> _parser = new pb::MessageParser<RoomPotAck>(() => new RoomPotAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPotAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPotAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPotAck(RoomPotAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      pot_ = other.pot_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPotAck Clone() {
      return new RoomPotAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_pot_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> pot_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pot {
      get { return pot_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPotAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPotAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if(!pot_.Equals(other.pot_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      hash ^= pot_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      pot_.WriteTo(output, _repeated_pot_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      size += pot_.CalculateSize(_repeated_pot_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPotAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      pot_.Add(other.pot_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18:
          case 16: {
            pot_.AddEntriesFrom(input, _repeated_pot_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2110, 通报当前下注玩家
  /// </summary>
  public sealed partial class RoomActionAck : pb::IMessage<RoomActionAck> {
    private static readonly pb::MessageParser<RoomActionAck> _parser = new pb::MessageParser<RoomActionAck>(() => new RoomActionAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomActionAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomActionAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomActionAck(RoomActionAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      pos_ = other.pos_;
      baseBet_ = other.baseBet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomActionAck Clone() {
      return new RoomActionAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "base_bet" field.</summary>
    public const int BaseBetFieldNumber = 3;
    private int baseBet_;
    /// <summary>
    /// 单注额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseBet {
      get { return baseBet_; }
      set {
        baseBet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomActionAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomActionAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (Pos != other.Pos) return false;
      if (BaseBet != other.BaseBet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (BaseBet != 0) hash ^= BaseBet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (BaseBet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseBet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (BaseBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseBet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomActionAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.BaseBet != 0) {
        BaseBet = other.BaseBet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            BaseBet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2111, 摊牌和比牌
  /// </summary>
  public sealed partial class RoomShowdownAck : pb::IMessage<RoomShowdownAck> {
    private static readonly pb::MessageParser<RoomShowdownAck> _parser = new pb::MessageParser<RoomShowdownAck>(() => new RoomShowdownAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomShowdownAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShowdownAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShowdownAck(RoomShowdownAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Table = other.table_ != null ? other.Table.Clone() : null;
      potList_ = other.potList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShowdownAck Clone() {
      return new RoomShowdownAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 2;
    private global::NetProto.TableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "pot_list" field.</summary>
    public const int PotListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.PotInfo> _repeated_potList_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.PotInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.PotInfo> potList_ = new pbc::RepeatedField<global::NetProto.PotInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.PotInfo> PotList {
      get { return potList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomShowdownAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomShowdownAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if(!potList_.Equals(other.potList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      hash ^= potList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (table_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Table);
      }
      potList_.WriteTo(output, _repeated_potList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      size += potList_.CalculateSize(_repeated_potList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomShowdownAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::NetProto.TableInfo();
        }
        Table.MergeFrom(other.Table);
      }
      potList_.Add(other.potList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (table_ == null) {
              table_ = new global::NetProto.TableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
          case 26: {
            potList_.AddEntriesFrom(input, _repeated_potList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2112, 玩家站起
  /// </summary>
  public sealed partial class RoomPlayerStandupReq : pb::IMessage<RoomPlayerStandupReq> {
    private static readonly pb::MessageParser<RoomPlayerStandupReq> _parser = new pb::MessageParser<RoomPlayerStandupReq>(() => new RoomPlayerStandupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerStandupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupReq(RoomPlayerStandupReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupReq Clone() {
      return new RoomPlayerStandupReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerStandupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerStandupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerStandupReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2113, 玩家站起通报
  /// </summary>
  public sealed partial class RoomPlayerStandupAck : pb::IMessage<RoomPlayerStandupAck> {
    private static readonly pb::MessageParser<RoomPlayerStandupAck> _parser = new pb::MessageParser<RoomPlayerStandupAck>(() => new RoomPlayerStandupAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerStandupAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupAck(RoomPlayerStandupAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      tableId_ = other.tableId_;
      playerId_ = other.playerId_;
      playerPos_ = other.playerPos_;
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerStandupAck Clone() {
      return new RoomPlayerStandupAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_pos" field.</summary>
    public const int PlayerPosFieldNumber = 4;
    private int playerPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerPos {
      get { return playerPos_; }
      set {
        playerPos_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 5;
    private bool force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerStandupAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerStandupAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (TableId != other.TableId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (PlayerPos != other.PlayerPos) return false;
      if (Force != other.Force) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerPos != 0) hash ^= PlayerPos.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerId);
      }
      if (PlayerPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerPos);
      }
      if (Force != false) {
        output.WriteRawTag(40);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PlayerPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerPos);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerStandupAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerPos != 0) {
        PlayerPos = other.PlayerPos;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 24: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerPos = input.ReadInt32();
            break;
          }
          case 40: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2114, 玩家坐下
  /// </summary>
  public sealed partial class RoomPlayerSitdownReq : pb::IMessage<RoomPlayerSitdownReq> {
    private static readonly pb::MessageParser<RoomPlayerSitdownReq> _parser = new pb::MessageParser<RoomPlayerSitdownReq>(() => new RoomPlayerSitdownReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerSitdownReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownReq(RoomPlayerSitdownReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      tableId_ = other.tableId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownReq Clone() {
      return new RoomPlayerSitdownReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerSitdownReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerSitdownReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (TableId != other.TableId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerSitdownReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2115, 玩家坐下通报
  /// </summary>
  public sealed partial class RoomPlayerSitdownAck : pb::IMessage<RoomPlayerSitdownAck> {
    private static readonly pb::MessageParser<RoomPlayerSitdownAck> _parser = new pb::MessageParser<RoomPlayerSitdownAck>(() => new RoomPlayerSitdownAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerSitdownAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownAck(RoomPlayerSitdownAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerSitdownAck Clone() {
      return new RoomPlayerSitdownAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::NetProto.PlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerSitdownAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerSitdownAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerSitdownAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.PlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::NetProto.PlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2116, 玩家换桌
  /// </summary>
  public sealed partial class RoomPlayerChangeTableReq : pb::IMessage<RoomPlayerChangeTableReq> {
    private static readonly pb::MessageParser<RoomPlayerChangeTableReq> _parser = new pb::MessageParser<RoomPlayerChangeTableReq>(() => new RoomPlayerChangeTableReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerChangeTableReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerChangeTableReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerChangeTableReq(RoomPlayerChangeTableReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerChangeTableReq Clone() {
      return new RoomPlayerChangeTableReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerChangeTableReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerChangeTableReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerChangeTableReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2117, 关闭牌桌，服务进行维护时通报
  /// </summary>
  public sealed partial class RoomShutdownTableAck : pb::IMessage<RoomShutdownTableAck> {
    private static readonly pb::MessageParser<RoomShutdownTableAck> _parser = new pb::MessageParser<RoomShutdownTableAck>(() => new RoomShutdownTableAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomShutdownTableAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShutdownTableAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShutdownTableAck(RoomShutdownTableAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomShutdownTableAck Clone() {
      return new RoomShutdownTableAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomShutdownTableAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomShutdownTableAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomShutdownTableAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2118, 玩家退出游戏  type: 1注销
  /// </summary>
  public sealed partial class RoomPlayerLogoutReq : pb::IMessage<RoomPlayerLogoutReq> {
    private static readonly pb::MessageParser<RoomPlayerLogoutReq> _parser = new pb::MessageParser<RoomPlayerLogoutReq>(() => new RoomPlayerLogoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerLogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLogoutReq(RoomPlayerLogoutReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerLogoutReq Clone() {
      return new RoomPlayerLogoutReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerLogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerLogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerLogoutReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2119, 玩家断线重连 牌桌信息回复
  /// </summary>
  public sealed partial class RoomPlayerReconnectAck : pb::IMessage<RoomPlayerReconnectAck> {
    private static readonly pb::MessageParser<RoomPlayerReconnectAck> _parser = new pb::MessageParser<RoomPlayerReconnectAck>(() => new RoomPlayerReconnectAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerReconnectAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerReconnectAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerReconnectAck(RoomPlayerReconnectAck other) : this() {
      BaseAck = other.baseAck_ != null ? other.BaseAck.Clone() : null;
      Table = other.table_ != null ? other.Table.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerReconnectAck Clone() {
      return new RoomPlayerReconnectAck(this);
    }

    /// <summary>Field number for the "base_ack" field.</summary>
    public const int BaseAckFieldNumber = 1;
    private global::NetProto.BaseAck baseAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseAck BaseAck {
      get { return baseAck_; }
      set {
        baseAck_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 2;
    private global::NetProto.TableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerReconnectAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerReconnectAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseAck, other.BaseAck)) return false;
      if (!object.Equals(Table, other.Table)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseAck_ != null) hash ^= BaseAck.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAck_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAck);
      }
      if (table_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAck);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerReconnectAck other) {
      if (other == null) {
        return;
      }
      if (other.baseAck_ != null) {
        if (baseAck_ == null) {
          baseAck_ = new global::NetProto.BaseAck();
        }
        BaseAck.MergeFrom(other.BaseAck);
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::NetProto.TableInfo();
        }
        Table.MergeFrom(other.Table);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAck_ == null) {
              baseAck_ = new global::NetProto.BaseAck();
            }
            input.ReadMessage(baseAck_);
            break;
          }
          case 18: {
            if (table_ == null) {
              table_ = new global::NetProto.TableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2120, 牌桌聊天消息回复
  /// </summary>
  public sealed partial class RoomTableChatAck : pb::IMessage<RoomTableChatAck> {
    private static readonly pb::MessageParser<RoomTableChatAck> _parser = new pb::MessageParser<RoomTableChatAck>(() => new RoomTableChatAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomTableChatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatAck(RoomTableChatAck other) : this() {
      id_ = other.id_;
      body_ = other.body_;
      offset_ = other.offset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatAck Clone() {
      return new RoomTableChatAck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomTableChatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomTableChatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Body != other.Body) return false;
      if (Offset != other.Offset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (Offset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomTableChatAck other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
          case 24: {
            Offset = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2121, 牌桌发送聊天消息
  /// </summary>
  public sealed partial class RoomTableChatReq : pb::IMessage<RoomTableChatReq> {
    private static readonly pb::MessageParser<RoomTableChatReq> _parser = new pb::MessageParser<RoomTableChatReq>(() => new RoomTableChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomTableChatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatReq(RoomTableChatReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
      id_ = other.id_;
      body_ = other.body_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomTableChatReq Clone() {
      return new RoomTableChatReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomTableChatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomTableChatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      if (Id != other.Id) return false;
      if (Body != other.Body) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomTableChatReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2122, 自动坐下等待玩家数通报
  /// </summary>
  public sealed partial class RoomPlayerAutoSitdownAck : pb::IMessage<RoomPlayerAutoSitdownAck> {
    private static readonly pb::MessageParser<RoomPlayerAutoSitdownAck> _parser = new pb::MessageParser<RoomPlayerAutoSitdownAck>(() => new RoomPlayerAutoSitdownAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerAutoSitdownAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownAck(RoomPlayerAutoSitdownAck other) : this() {
      num_ = other.num_;
      queue_ = other.queue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownAck Clone() {
      return new RoomPlayerAutoSitdownAck(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_queue_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> queue_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Queue {
      get { return queue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerAutoSitdownAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerAutoSitdownAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if(!queue_.Equals(other.queue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      hash ^= queue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      queue_.WriteTo(output, _repeated_queue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      size += queue_.CalculateSize(_repeated_queue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerAutoSitdownAck other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      queue_.Add(other.queue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            queue_.AddEntriesFrom(input, _repeated_queue_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2123, 玩家加入自动坐下队列
  /// </summary>
  public sealed partial class RoomPlayerAutoSitdownReq : pb::IMessage<RoomPlayerAutoSitdownReq> {
    private static readonly pb::MessageParser<RoomPlayerAutoSitdownReq> _parser = new pb::MessageParser<RoomPlayerAutoSitdownReq>(() => new RoomPlayerAutoSitdownReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerAutoSitdownReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownReq(RoomPlayerAutoSitdownReq other) : this() {
      BaseReq = other.baseReq_ != null ? other.BaseReq.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerAutoSitdownReq Clone() {
      return new RoomPlayerAutoSitdownReq(this);
    }

    /// <summary>Field number for the "base_req" field.</summary>
    public const int BaseReqFieldNumber = 1;
    private global::NetProto.BaseReq baseReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BaseReq BaseReq {
      get { return baseReq_; }
      set {
        baseReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerAutoSitdownReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerAutoSitdownReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseReq, other.BaseReq)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseReq_ != null) hash ^= BaseReq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerAutoSitdownReq other) {
      if (other == null) {
        return;
      }
      if (other.baseReq_ != null) {
        if (baseReq_ == null) {
          baseReq_ = new global::NetProto.BaseReq();
        }
        BaseReq.MergeFrom(other.BaseReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseReq_ == null) {
              baseReq_ = new global::NetProto.BaseReq();
            }
            input.ReadMessage(baseReq_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PotInfo : pb::IMessage<PotInfo> {
    private static readonly pb::MessageParser<PotInfo> _parser = new pb::MessageParser<PotInfo>(() => new PotInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotInfo(PotInfo other) : this() {
      pot_ = other.pot_;
      ps_ = other.ps_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotInfo Clone() {
      return new PotInfo(this);
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 1;
    private int pot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    /// <summary>Field number for the "ps" field.</summary>
    public const int PsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_ps_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> ps_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ps {
      get { return ps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pot != other.Pot) return false;
      if(!ps_.Equals(other.ps_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pot != 0) hash ^= Pot.GetHashCode();
      hash ^= ps_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pot);
      }
      ps_.WriteTo(output, _repeated_ps_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pot);
      }
      size += ps_.CalculateSize(_repeated_ps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PotInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pot != 0) {
        Pot = other.Pot;
      }
      ps_.Add(other.ps_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pot = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            ps_.AddEntriesFrom(input, _repeated_ps_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌桌信息
  /// </summary>
  public sealed partial class TableInfo : pb::IMessage<TableInfo> {
    private static readonly pb::MessageParser<TableInfo> _parser = new pb::MessageParser<TableInfo>(() => new TableInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo(TableInfo other) : this() {
      id_ = other.id_;
      smallBlind_ = other.smallBlind_;
      bigBlind_ = other.bigBlind_;
      bet_ = other.bet_;
      timeout_ = other.timeout_;
      cards_ = other.cards_.Clone();
      pot_ = other.pot_.Clone();
      chips_ = other.chips_.Clone();
      button_ = other.button_;
      n_ = other.n_;
      max_ = other.max_;
      players_ = other.players_.Clone();
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo Clone() {
      return new TableInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// 牌桌id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "small_blind" field.</summary>
    public const int SmallBlindFieldNumber = 2;
    private int smallBlind_;
    /// <summary>
    /// 小盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    /// <summary>Field number for the "big_blind" field.</summary>
    public const int BigBlindFieldNumber = 3;
    private int bigBlind_;
    /// <summary>
    /// 大盲注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigBlind {
      get { return bigBlind_; }
      set {
        bigBlind_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 4;
    private int bet_;
    /// <summary>
    /// 当前下注额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 5;
    private int timeout_;
    /// <summary>
    /// 倒计时超时时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NetProto.CardInfo> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(50, global::NetProto.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.CardInfo> cards_ = new pbc::RepeatedField<global::NetProto.CardInfo>();
    /// <summary>
    ///公共牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.CardInfo> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_pot_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> pot_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当前奖池筹码数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pot {
      get { return pot_; }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_chips_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> chips_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 玩家本局下注的总筹码数，与players一一对应
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Chips {
      get { return chips_; }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 9;
    private int button_;
    /// <summary>
    /// 当前庄家座位号，从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    /// <summary>Field number for the "n" field.</summary>
    public const int NFieldNumber = 10;
    private int n_;
    /// <summary>
    /// 当前玩家人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 11;
    private int max_;
    /// <summary>
    ///  牌桌最大玩家人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::NetProto.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(98, global::NetProto.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.PlayerInfo> players_ = new pbc::RepeatedField<global::NetProto.PlayerInfo>();
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.PlayerInfo> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private int status_;
    /// <summary>
    /// 0已结束  1进行中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SmallBlind != other.SmallBlind) return false;
      if (BigBlind != other.BigBlind) return false;
      if (Bet != other.Bet) return false;
      if (Timeout != other.Timeout) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!pot_.Equals(other.pot_)) return false;
      if(!chips_.Equals(other.chips_)) return false;
      if (Button != other.Button) return false;
      if (N != other.N) return false;
      if (Max != other.Max) return false;
      if(!players_.Equals(other.players_)) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SmallBlind != 0) hash ^= SmallBlind.GetHashCode();
      if (BigBlind != 0) hash ^= BigBlind.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= pot_.GetHashCode();
      hash ^= chips_.GetHashCode();
      if (Button != 0) hash ^= Button.GetHashCode();
      if (N != 0) hash ^= N.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      hash ^= players_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SmallBlind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SmallBlind);
      }
      if (BigBlind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BigBlind);
      }
      if (Bet != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bet);
      }
      if (Timeout != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Timeout);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      pot_.WriteTo(output, _repeated_pot_codec);
      chips_.WriteTo(output, _repeated_chips_codec);
      if (Button != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Button);
      }
      if (N != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(N);
      }
      if (Max != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Max);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (Status != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SmallBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallBlind);
      }
      if (BigBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigBlind);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += pot_.CalculateSize(_repeated_pot_codec);
      size += chips_.CalculateSize(_repeated_chips_codec);
      if (Button != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Button);
      }
      if (N != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(N);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SmallBlind != 0) {
        SmallBlind = other.SmallBlind;
      }
      if (other.BigBlind != 0) {
        BigBlind = other.BigBlind;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      cards_.Add(other.cards_);
      pot_.Add(other.pot_);
      chips_.Add(other.chips_);
      if (other.Button != 0) {
        Button = other.Button;
      }
      if (other.N != 0) {
        N = other.N;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      players_.Add(other.players_);
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            SmallBlind = input.ReadInt32();
            break;
          }
          case 24: {
            BigBlind = input.ReadInt32();
            break;
          }
          case 32: {
            Bet = input.ReadInt32();
            break;
          }
          case 40: {
            Timeout = input.ReadInt32();
            break;
          }
          case 50: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 58:
          case 56: {
            pot_.AddEntriesFrom(input, _repeated_pot_codec);
            break;
          }
          case 66:
          case 64: {
            chips_.AddEntriesFrom(input, _repeated_chips_codec);
            break;
          }
          case 72: {
            Button = input.ReadInt32();
            break;
          }
          case 80: {
            N = input.ReadInt32();
            break;
          }
          case 88: {
            Max = input.ReadInt32();
            break;
          }
          case 98: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 104: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 牌
  /// </summary>
  public sealed partial class CardInfo : pb::IMessage<CardInfo> {
    private static readonly pb::MessageParser<CardInfo> _parser = new pb::MessageParser<CardInfo>(() => new CardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo(CardInfo other) : this() {
      suit_ = other.suit_;
      val_ = other.val_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo Clone() {
      return new CardInfo(this);
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private int suit_;
    /// <summary>
    ///程序统一标准：0是黑桃、1是红桃、2是梅花、3是方片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private int val_;
    /// <summary>
    ///0代表‘牌2’、1代表‘牌3’...etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Val != other.Val) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != 0) hash ^= Suit.GetHashCode();
      if (Val != 0) hash ^= Val.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Suit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Suit);
      }
      if (Val != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suit);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Suit != 0) {
        Suit = other.Suit;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Suit = input.ReadInt32();
            break;
          }
          case 16: {
            Val = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家信息
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.AgentReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      pos_ = other.pos_;
      id_ = other.id_;
      nickname_ = other.nickname_;
      avatar_ = other.avatar_;
      level_ = other.level_;
      chips_ = other.chips_;
      bet_ = other.bet_;
      action_ = other.action_;
      cards_ = other.cards_.Clone();
      handLevel_ = other.handLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 玩家座位号，从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    /// <summary>
    /// 玩家显示名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private string level_ = "";
    /// <summary>
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 6;
    private int chips_;
    /// <summary>
    /// 玩家手上的筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 7;
    private int bet_;
    /// <summary>
    /// 玩家当前下注筹码数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 8;
    private string action_ = "";
    /// <summary>
    /// 玩家当前行动(ready, check, call, raise, fold)，初始状态为ready, 中途加入的玩家状态为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NetProto.CardInfo> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(74, global::NetProto.CardInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.CardInfo> cards_ = new pbc::RepeatedField<global::NetProto.CardInfo>();
    /// <summary>
    /// 玩家底牌，其他玩家只有摊牌时才能看到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.CardInfo> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "hand_level" field.</summary>
    public const int HandLevelFieldNumber = 10;
    private int handLevel_;
    /// <summary>
    /// 牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandLevel {
      get { return handLevel_; }
      set {
        handLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (Id != other.Id) return false;
      if (Nickname != other.Nickname) return false;
      if (Avatar != other.Avatar) return false;
      if (Level != other.Level) return false;
      if (Chips != other.Chips) return false;
      if (Bet != other.Bet) return false;
      if (Action != other.Action) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (HandLevel != other.HandLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (Chips != 0) hash ^= Chips.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (HandLevel != 0) hash ^= HandLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Level);
      }
      if (Chips != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Chips);
      }
      if (Bet != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Bet);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Action);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (HandLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HandLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (Chips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chips);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (HandLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.Chips != 0) {
        Chips = other.Chips;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      cards_.Add(other.cards_);
      if (other.HandLevel != 0) {
        HandLevel = other.HandLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 42: {
            Level = input.ReadString();
            break;
          }
          case 48: {
            Chips = input.ReadInt32();
            break;
          }
          case 56: {
            Bet = input.ReadInt32();
            break;
          }
          case 66: {
            Action = input.ReadString();
            break;
          }
          case 74: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 80: {
            HandLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
